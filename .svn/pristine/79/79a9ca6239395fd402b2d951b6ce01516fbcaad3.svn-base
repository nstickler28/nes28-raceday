
package model;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Scanner;

/**
 * 
 * 
 * @author Nathan Stickler
 * @version 11/8/19
 */
public class RaceModel implements PropertyChangeEnabledRaceControls {

    /** The. */
    private final PropertyChangeSupport myPcs;
    
    /**
     * 
     */
    public RaceModel() {
        myPcs = new PropertyChangeSupport(this);
    }

    @Override
    public void advance() {

    }

    @Override
    public void advance(final int theMillisecond) {

    }

    @Override
    public void moveTo(final int theMillisecond) {

    }

    @Override
    public void toggleParticipant(final int theParticpantID, final boolean theToggle) {

    }

    @Override
    public void loadRace(final File theRaceFile) throws IOException {
//        final String[] parts = theRaceFile.getName().split("\\.");
//        if (!parts[1].equals("rce")) {
//            throw new IOException();
//        }
        try (Scanner input = new Scanner(theRaceFile)) {
            final StringBuilder sb = new StringBuilder();
            while (input.hasNextLine()) {
                final String line = input.nextLine();

                if (line.charAt(0) == '#') {
                    parseHeader(sb, line);
                } else if (line.substring(0, 2).equals("$L")) {
                    parseLeaderBoard(line);
                } else if (line.substring(0, 2).equals("$T")) {
                    parseTelemetry(line);
                } else if (line.substring(0, 2).equals("$C")) {
                    parseLineCrossing(line);
                }
            }
            
            myPcs.firePropertyChange(HEADER_INFORMATION, null, sb.toString());
            
        } catch (final IOException e) {
            e.printStackTrace();
        }
        System.out.println();
    }
    
    private void parseHeader(final StringBuilder theBuilder, final String theLine) {
        theBuilder.append(theLine + "\n");
        System.out.println(theLine);
    }
    
    private void parseTelemetry(final String theLine) {
        System.out.println(theLine);
    }
    
    private void parseLeaderBoard(final String theLine) {
        System.out.println(theLine);
    }
    
    private void parseLineCrossing(final String theLine) {
        System.out.println(theLine);
    }

    @Override
    public void addPropertyChangeListener(final PropertyChangeListener theListener) {
        myPcs.addPropertyChangeListener(theListener);
    }

    @Override
    public void addPropertyChangeListener(final String thePropertyName,
                                          final PropertyChangeListener theListener) {
        myPcs.addPropertyChangeListener(thePropertyName, theListener);
    }

    @Override
    public void removePropertyChangeListener(final PropertyChangeListener theListener) {
        myPcs.removePropertyChangeListener(theListener);
    }

    @Override
    public void removePropertyChangeListener(final String thePropertyName,
                                             final PropertyChangeListener theListener) {
        myPcs.removePropertyChangeListener(thePropertyName, theListener);
    }

}
