
package model;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/**
 * Race day model.
 * 
 * @author Nathan Stickler
 * @version 11/8/19
 */
public class RaceModel implements PropertyChangeEnabledRaceControls {

    /** Separator to split race messages. */
    private static final String DELIMITER = ":";
    
    /** The. */
    private final PropertyChangeSupport myPcs;

    /** List of messages organized by timestamp. */
    private final Map<Integer, List<Message>> myMsgs;
    
    /** Current time of the race. */
    private int myTime;
    
    /** Contains information from header. */
    private RaceInfo myRaceInfo;
    
    /** Lists if racer ID should be disabled or not. */
    private final Map<Integer, Boolean> myTogglePart;
    
    /**
     * Constructor for the RaceModel.
     */
    public RaceModel() {
        super();
        myPcs = new PropertyChangeSupport(this);
        myMsgs = new HashMap<>();
        myTogglePart = new HashMap<>();
        myTime = 0;
    }

    @Override
    public void advance() {
        advance(1);
    }

    @Override
    public void advance(final int theMillisecond) {
        final int oldTime = myTime;
        final int newTime =  myTime + theMillisecond;
        if (newTime > myRaceInfo.getTotalRaceTime()) {
            myTime = myRaceInfo.getTotalRaceTime();
            myPcs.firePropertyChange(PROPERTY_REPEAT, false, true);
            if (myTime == myRaceInfo.getTotalRaceTime()) {
                myPcs.firePropertyChange(PROPERTY_RACE_FINISHED, false, true);
            }
        } else {
            myPcs.firePropertyChange(PROPERTY_TIME, oldTime, myTime);
        }
    }

    @Override
    public void moveTo(final int theMillisecond) {

    }

    @Override
    public void toggleParticipant(final int theParticipantID, final boolean theToggle) {
        if (myTogglePart.containsKey(theParticipantID)) {
            myTogglePart.put(theParticipantID, theToggle);
        }
    }

    @Override
    public void loadRace(final File theRaceFile) throws IOException {

        final Scanner input = new Scanner(theRaceFile);
        final StringBuilder sb = new StringBuilder();
        if (!input.hasNextLine()) {
            throw new IOException();
        }
        while (input.hasNextLine()) {
            Message message = null;
            final String line = input.nextLine();
            
            if (line.charAt(0) == '#') {
                parseHeader(sb, line);
            } else if (line.substring(0, 2).equals("$L")) {
                message = parseLeaderBoard(line);
            } else if (line.substring(0, 2).equals("$T")) {
                message = parseTelemetry(line);
            } else if (line.substring(0, 2).equals("$C")) {
                message = parseLineCrossing(line);
            } else {
                throw new IOException();
            }
            if (message != null) {
                myMsgs.get(message.getTime()).add(message);
            }
        }

        myPcs.firePropertyChange(PROPERTY_HEADER, null, sb.toString());

        System.out.println();
    }

    /**
     * Helper method for parsing the header.
     * @param theBuilder the string builder
     * @param theLine the line being read
     */
    private void parseHeader(final StringBuilder theBuilder, final String theLine) {
        theBuilder.append(theLine + "\n");
    }

    /**
     * Helper method for parsing telemetry message.
     * @param theLine the line being read
     * @return message returns the message
     */
    private Message parseTelemetry(final String theLine) {
        final String[] parts = theLine.split(DELIMITER);
        final int timeStamp = Integer.parseInt(parts[1]);
        final int racerID = Integer.parseInt(parts[2]);
        final double distance = Double.parseDouble(parts[3]);
        final int lap = Integer.parseInt(parts[4]);
        final TelemetryMessage message = new TelemetryMessage(timeStamp, racerID,
                                                              distance, lap);
        return message;
    }

    /**
     * Helper method for parsing leader board message.
     * @param theLine the line being read
     * @return message returns the message
     */
    private Message parseLeaderBoard(final String theLine) {
        final String[] parts = theLine.split(DELIMITER);
        final int timeStamp = Integer.parseInt(parts[1]);
        final int[] racerIDs = new int[parts.length - 2];
        int racerIDIndex = 0;
        for (int i = 2; i < parts.length; i++) {
            racerIDs[racerIDIndex++] = Integer.parseInt(parts[i]);
        }
        final LeaderboardMessage message = new LeaderboardMessage(timeStamp, racerIDs);
        return message;
    }

    /**
     * Helper method for parsing finish line crossing message.
     * @param theLine the line being read
     * @return message returns the message
     */
    private Message parseLineCrossing(final String theLine) {
        final String[] parts = theLine.split(DELIMITER);
        final int timeStamp = Integer.parseInt(parts[1]);
        final int racerID = Integer.parseInt(parts[2]);
        final int lap = Integer.parseInt(parts[3]);
        final boolean isFinish = Boolean.parseBoolean(parts[4]);
        final LineCrossingMessage message = new LineCrossingMessage(timeStamp, racerID,
                                                                    lap, isFinish);
        return message;
    }
    
    /**
     * Helper method to get message list at the timeStamp.
     * @param theTimeStamp the timeStamp
     * @return the list at the timeStamp
     */
    private List<Message> getMessageListAt(final int theTimeStamp) {
        if (myMsgs.get(theTimeStamp) != null) {
            return myMsgs.get(theTimeStamp);
        } else {
            return new ArrayList<>();
        }
    }

    @Override
    public void addPropertyChangeListener(final PropertyChangeListener theListener) {
        myPcs.addPropertyChangeListener(theListener);
    }

    @Override
    public void addPropertyChangeListener(final String thePropertyName,
                                          final PropertyChangeListener theListener) {
        myPcs.addPropertyChangeListener(thePropertyName, theListener);
    }

    @Override
    public void removePropertyChangeListener(final PropertyChangeListener theListener) {
        myPcs.removePropertyChangeListener(theListener);
    }

    @Override
    public void removePropertyChangeListener(final String thePropertyName,
                                             final PropertyChangeListener theListener) {
        myPcs.removePropertyChangeListener(thePropertyName, theListener);
    }

}
